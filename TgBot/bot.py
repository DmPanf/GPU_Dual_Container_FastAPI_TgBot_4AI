# Simple bot.py

from aiogram import Bot, Dispatcher, types
import logging
import asyncio
import aiohttp
from aiohttp import ClientTimeout
import json
from dotenv import load_dotenv
from io import BytesIO
import base64
import os
import csv
from datetime import datetime
from text_module import commands, help_text

# Load environment variables
load_dotenv()
API_TOKEN = os.getenv("TOKEN")
ADMIN_CHAT_ID = os.getenv("CHAT_ID")
API_URL = os.getenv("API_URL")
mdl_name = os.getenv("mdl_name")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π mdl_name –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞

log_folder = os.getenv("LOG_DIR")
log_file = os.getenv("LOG_FILE")

  
if not API_TOKEN:
    raise ValueError("TG_TOKEN is not set in the environment variables or .env file!")

if not os.path.exists(log_folder):  # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs(log_folder)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[
        logging.FileHandler(f"{log_folder}/{log_file}"),
        logging.StreamHandler()
    ]
)


bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

async def on_startup(dp):
    bot_info = await dp.bot.get_me()
    bot_name = bot_info.username
    user_id = bot_info.id
    await dp.bot.send_message(chat_id=ADMIN_CHAT_ID, text=f'‚ú¥Ô∏è –ë–æ—Ç @{bot_name} –∑–∞–ø—É—â–µ–Ω!\nüà≤ Main Server: ciet')
    print(f'‚ú¥Ô∏è  –ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω!')


#async def fetch(session, url):
#    async with session.get(url) as response:  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è GET-–∑–∞–ø—Ä–æ—Å–∞
#        return await response.text()          # –í–æ–∑–≤—Ä–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞

async def fetch(session, url):
    try:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.text()
                # return await response.json()
            else:
                raise Exception(f"Error: {response.status} - {await response.text()}")
    except Exception as e:
        print(f"fetch ------ Error occurred: {e}")
        raise e
    

def save_to_csv(results, user_id, user_name, phone):
    with open('./data/save_images.csv', mode='a', newline='', encoding='utf-8') as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now(), user_id, user_name, phone, *results.values()])


@dp.message_handler(commands=['start','info'])
async def send_info(message: types.Message):
    # API_URL = os.getenv("API_URL")  #  –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑ .env —Ñ–∞–∏ÃÜ–ª–∞
    # print(f' ... API_URL/info: {API_URL}')
    timeout = ClientTimeout(total=5)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
    async with aiohttp.ClientSession(timeout=timeout) as session:
        try:
            info = await fetch(session, f'{API_URL}/info') 
            data = json.loads(info)["Project 2023"]
            # await message.answer(f"üî∞ <b>Project Info:</b>\n<pre>{data}</pre>", parse_mode="HTML", reply_markup=keyboard)
            await message.answer(f"üî∞ <b>Project Info:</b>\n<pre>{data}</pre>", parse_mode="HTML")
        except Exception as e:
            print(f"info ------ Error occurred: {e}")
            # await message.answer(f"‚õîÔ∏è –°–µ—Ä–≤–µ—Ä <b>FastAPI</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n{e}", parse_mode="HTML", reply_markup=keyboard)
            await message.answer(f"‚õîÔ∏è –°–µ—Ä–≤–µ—Ä <b>FastAPI</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n{e}", parse_mode="HTML")


# +++++++++++++++ PHOTO +++++++++++++++
# handler for receiving images and making POST requests to FastAPI
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def process_image(message: types.Message):
    file_id = message.photo[-1].file_id  # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
    file = await bot.get_file(file_id)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Ñ–∞–∏ÃÜ–ª–∞ 
    file_path = file.file_path  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–∏ÃÜ–ª—É 

    image_data = await bot.download_file(file_path)  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

    url = f'{API_URL}/predict'  # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä 

    timeout = ClientTimeout(total=15)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –≤ 15 —Å–µ–∫—É–Ω–¥
    async with aiohttp.ClientSession(timeout=timeout) as session:  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏ HTTP
        form = aiohttp.FormData()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã 
        form.add_field('file', image_data, filename='input_image.jpg', content_type='image/jpg')  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è –≤ —Ñ–æ—Ä–º—É 
        form.add_field('mdl_name', mdl_name)
        try:
            async with session.post(url, data=form) as response:
                if response.status == 200:
                    response_json = await response.json()
                    img_str = response_json['image']
                    results = response_json['results'] 

                    add_info = f"\n<b>üìü –ü–æ–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∏–±–æ—Ä–∞:</b> [<code>{results['counter']}</code>]" \
                               f"\n<b>‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> {results['inference']}ms" \
                               f"\n<b>‚öñÔ∏è –ú–æ–¥–µ–ª—å:</b> {results['model_name']}" \
                               f"\n<b>üîç –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ {results['object_count']} –æ–±—ä–µ–∫—Ç–æ–≤</b>" \
                               f"\n<b>üìÜ –î–∞—Ç–∞/–í—Ä–µ–º—è:</b> <code>{results['current_time']}</code>" \
                               f"\n<b>üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {results['wh_check']}</b>" \
                               f"\n<b>üíæ –ò–º—è —Ñ–∞–π–ª–∞:</b> <code>{results['file_name']}</code>"
                    
                    # Save to CSV
                    user_id = message.from_user.id
                    user_name = message.from_user.username
                    phone = message.contact.phone_number if message.contact else 'N/A'  # Adjust as needed
                    save_to_csv(results, user_id, user_name, phone)

                    output_image_data = BytesIO(base64.b64decode(img_str))
                    output_image_data.seek(0)
                    await message.reply_photo(photo=output_image_data, caption=add_info, parse_mode="HTML")
        except KeyError as key_error:
            print(f"Key error: {key_error}")
            await message.answer(f"üõë –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {key_error}")
        except Exception as e:
            print(f"predict ------ ‚õîÔ∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            await message.answer(f"‚õîÔ∏è –°–µ—Ä–≤–µ—Ä <b>FastAPI [{API_URL}]</b> –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!\n‚åõÔ∏è Timeout=<b>{timeout} s</b>\n{e}", parse_mode="HTML")

# +++++++++++++++ PHOTO +++++++++++++++


@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
    await message.answer(help_text, parse_mode="Markdown")


# +++++++++++++ MAIN +++++++++++++
async def main():
    await on_startup(dp)
    await dp.start_polling()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ 

if __name__ == '__main__':
    asyncio.run(main())

